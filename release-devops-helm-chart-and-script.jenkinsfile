library identifier: 'hfmt-shared-library@jenkins-pipelines',
    retriever: modernSCM([
      $class: 'GitSCMSource',
      credentialsId: '046283f7-9d1a-499e-b436-604173ef2c84', 
      remote: 'https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-devops.git'
])

def forceStop = true

pipeline { 
    
    parameters {
        string(name: 'DEVOPS_TAG', defaultValue: '', trim: true , description: '<p style="font-family:Calibri (Body);color:Tomato;" > Input here the tag version of hfmt-devops repo which you want to release to customer.')
        string(name: 'DEVOPS_INFRA_TAG', defaultValue: '', trim: true , description: '<p style="font-family:Calibri (Body);color:Tomato;" > Input here the tag version of hfmt-devops-infra repo which you want to release to customer.')
        string(name: 'BUSINESS_RELEASE_NUMBER', defaultValue: '', trim: true , description: '<p style="font-family:Calibri (Body);color:Tomato;" > Provide the bussiness version which will be used to name the released branch.')
        separator(sectionHeader: 'RELEASE TO')
        booleanParam(name: 'HVN_AZURE_REPO', defaultValue: true, description: '<p style="font-family:Calibri (Body);color:Tomato;" > Check here if you want to release helm chart and infra script to HFMT Azure DevOps repo.')
        booleanParam(name: 'HRL_AZURE_REPO', defaultValue: false, description: '<p style="font-family:Calibri (Body);color:Tomato;" > Check here if you want to release helm chart and infra script to HRL Azure DevOps repo.')
    }

    environment { 
        // Jenkins ID
        GITLAB_CREDENTIAL_ID             =   "046283f7-9d1a-499e-b436-604173ef2c84"
        DEV_ACR_CREDENTIAL_ID            =   "hfmt_acr_hfmtdev"
        HARBOR_CREDENTIAL_ID             =   "hfmt_habor"
        
        // Pipeline variable
        DEV                              =   "DEV"
        QC                               =   "QC"
        UAT                              =   "UAT"
        LOCAL_UAT                        =   "local_UAT"

        DEV_RG_NAME                      =   "dev-rg-hfmt"
        QC_RG_NAME                       =   "qc-rg-hfmt"
        UAT_RG_NAME                      =   "HRL-UKS-HFMT-INT-RG01"
        LOCAL_UAT_RG_NAME                =   "qc-rg-hfmt"

        DEV_AZ_SP_ACCOUNT                =   "hfmt_azure_sp_account"
        QC_AZ_SP_ACCOUNT                 =   "hfmt_azure_sp_account"
        LOCAL_UAT_AZ_SP_ACCOUNT          =   "hfmt_azure_sp_account"
        UAT_AZ_SP_ACCOUNT                =   "hfmt_uat_azure_sp_account"

        DEV_AKS_NAME                     =   "dev-coreapp-aks"
        QC_AKS_NAME                      =   "qc-coreapp-aks"
        LOCAL_UAT_AKS_NAME               =   "uat-coreapp-aks"
        UAT_WEBAPP_AKS_NAME              =   "HRL-UKS-HFMT-INT-AKS-webapp"
        UAT_BE_AKS_NAME                  =   "HRL-UKS-HFMT-INT-AKS-backend"
        UAT_OBSIF_AKS_NAME               =   "HRL-UKS-HFMT-INT-AKS-obs-if"

        DEV_ACR_REGISTRY                 =   "hfmtdev"
        UAT_ACR_REGISTRY                 =   "hfmtuat"

        DEV_KEYVAULT                    =   "https://hfmt-dev-kv.vault.azure.net/"
        QC_KEYVAULT                     =   "https://hfmt-qc-kv.vault.azure.net/"
        UAT_KEYVAULT                    =   "https://hrl-uks-hfmt-int-kv-uat.vault.azure.net/"
        LOCAL_UAT_KEYVAULT              =   "NOT DEPLOYED YET"

        NAMESPACE_BACKEND                =   "backend-application"
        NAMESPACE_WEBAPP                 =   "web-application"
        NAMESPACE_OBSIF                  =   "wayside-application"
        
        DEV_BRANCH                       =   "*/develop"
        QC_BRANCH                        =   "*/develop"
        UAT_BRANCH                       =   "refs/tags/R3.0.0"
        LOCAL_UAT_BRANCH                 =   "refs/tags/R3.0.0"

        WEBAPP_IMAGE_NAME                =   "hfmt/web-app"
        OBS_IF_IMAGE_NAME                =   "hfmt/hfmt-obs-if-services"
        EXPORT_IMAGE_NAME                =   "hfmt/backend/export-service"
        NOTIFICATION_IMAGE_NAME          =   "hfmt/backend/notification-service"
        DAS_IMAGE_NAME                   =   "hfmt/backend/das-service"
        WARMUP_IMAGE_NAME                =   "hfmt/backend/warmup-service"
        STABLING_IMAGE_NAME              =   "hfmt/backend/stabling-service"
        ENERGY_IMAGE_NAME                =   "hfmt/backend/ec-service"
        RULE_IMAGE_NAME                  =   "hfmt/backend/rule-service"
        ALERTING_IMAGE_NAME              =   "hfmt/backend/alerting-service"
        TM_UPLOAD_IMAGE_NAME             =   "hfmt/backend/tm-upload-service"

        HARBOR_URL                       =   "fatadev.cybersoft.vn:8433"

        GITLAB_HFMT_DEVOPS               =   'https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-devops.git'
        GITLAB_HFMT_DEVOPS_INFRA         =   'https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-devops-infra.git'
        GITLAB_HFMT_OBS_IF               =   'https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-obs-if-services.git'
        GITLAB_HFMT_BACKEND              =   "https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-backend.git"  
        GITLAB_HFMT_WEB_SERVER           =   "https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-web-server.git"  
        GITLAB_HFMT_WEB_UI               =   "https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-web-ui.git"  
        GITLAB_HFMT_POM_PARENT           =   "https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-pom-parent.git"  
        GITLAB_HFMT_DATA_SERVICE         =   "https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-data-service.git"  
        GITLAB_HFMT_DATA_PROCESSING      =   "https://git.hv-vn.com/rail-transportation/hfmt-wcp/hfmt-data-processing.git"  
        HVN_AZURE_DEVOPS                 =   "git@ssh.dev.azure.com:v3/HFMT/Phoenix/hfmt-devops"
        HRL_AZURE_DEVOPS                 =   "git@ssh.dev.azure.com:v3/HRL-HFMT-Devops/HFMT-TestingWP1/HFMT-WP1Testv1.0"

        DEVOPS_DIR                       =   "hfmt-devops"
        DEVOPS_INFRA_DIR                 =   "hfmt-devops-infra"
        OBS_IF_DIR                       =   "hfmt-obs-if-services"
        BACKEND_DIR                      =   "hfmt-backend"
        WEB_SERVER_DIR                   =   "hfmt-web-server"
        WEB_UI_DIR                       =   "hfmt-web-ui"
        POM_PARENT_DIR                   =   "hfmt-pom-parent"
        DATA_SERVICE_DIR                 =   "hfmt-data-service"
        DATA_PROCESSING_DIR              =   "hfmt-data-processing"
        STREAMING_PROCESSING_DIR         =   "streaming-processing"

        OBS_IF_ASSEMBLER_JOB             =   "hfmt_obs_if_assembler"
        OBS_IF_DEPLOYER_JOB              =   "hfmt_obs_if_deployer"
        BACKEND_ASSEMBLER_JOB            =   "hfmt_backend_assembler"
        BACKEND_DEPLOYER_JOB             =   "hfmt_backend_deployer"
        WEB_ASSEMBLER_JOB                =   "hfmt_web_assembler"
        WEB_DEPLOYER_JOB                 =   "hfmt_web_deployer"
        DATA_PROCESSING_ASSEMBLER_JOB    =   "hfmt_data_processing_assembler"
        DATA_PROCESSING_DEPLOYER_JOB     =   "hfmt_data_processing_deployer"

        DEV_DATA_PROCESSING_NODE         =   "hfmt_datapro_dev_cloud"    
        QC_DATA_PROCESSING_NODE          =   "hfmt_datapro_qc_cloud"    
        UAT_DATA_PROCESSING_NODE         =   "hfmt_datapro_uat_cloud"    
        LOCAL_UAT_DATA_PROCESSING_NODE   =   "NOT DEPLOY YET"    

        DEV_SPARK_MASTER                 =   "spark://spark.uksouth.cloudapp.azure.com:7077"
        QC_SPARK_MASTER                  =   "spark://qc-spark-hd.azurehdinsight.net:7077"
        UAT_SPARK_MASTER                 =   "spark://plafcb-hrl-uks-hfmt-int-hdin-spark.azurehdinsight.net:7077"
        LOCAL_UAT_SPARK_MASTER           =   "NOT DEPLOY YET"


        MVN_CMD                          =   "/usr/bin/mvn"
        JAVA_HOME                        =   "/usr/lib/jvm/java-11-openjdk-11.0.15.0.10-2.el8_6.x86_64/"
    } 

    agent {
        label {
            label "hfmt_deployer"
        }
    }

    stages { 

        stage('Prepare workspace') { 
            steps{
                script {

                    echo "########## [INFO] Check environment and clean work space"

                    sh "rm -rf *"

                    if( "${BUSINESS_RELEASE_NUMBER}" == '')
                        echo "########## [WARNING] Empty BUSINESS_RELEASE_NUMBER. Nothing to do!"
                    else if( "${DEVOPS_TAG}${DEVOPS_INFRA_TAG}" == '')
                        echo "########## [WARNING] Empty TAG. Nothing to do!"
                    else if( "${HVN_AZURE_REPO}${HRL_AZURE_REPO}" == '')
                        echo "########## [WARNING] None of Azure Repo is selected. Nothing to do!"
                    else 
                        forceStop = false
                }
            }
        } 

        stage('Checkout hfmt-devops repo') { 
            when { 
                expression { forceStop == false && params.DEVOPS_TAG != '' }
            } 
            steps { 
                script {
                    echo "########## [INFO] Checkout $DEVOPS_DIR repo"

                    scm_repo.checkoutWithBranch(GITLAB_HFMT_DEVOPS,DEVOPS_TAG,DEVOPS_DIR)
                }
            } 
        } 

        stage('Checkout hfmt-devops-infra repo') { 
            when { 
                expression { forceStop == false && params.DEVOPS_INFRA_TAG != '' }
            } 
            steps { 
                script {
                    echo "########## [INFO] Checkout $DEVOPS_INFRA_DIR repo"

                    scm_repo.checkoutWithBranch(GITLAB_HFMT_DEVOPS_INFRA,DEVOPS_INFRA_TAG,DEVOPS_INFRA_DIR)
                }
            } 
        } 
        
        // Must manually add ssh key to azure repo
        // Create ssh key pair by comand
        // ssh-keygen -m PEM -f ./hfmt -t rsa -b 4096 -C ""
        // DONOT FORGET to perform the first git clone command to complete key handshake 
        stage('Release to HNV Azure Repo') { 
            when { 
                expression { forceStop == false && params.HVN_AZURE_REPO == true }
            } 
            steps { 
                script {

                    releaseHelmChartScript(HVN_AZURE_DEVOPS)
                }
            } 
        }  

        // NOT VERIFY YET
        stage('Release to HRL Azure Repo') { 
            when { 
                expression { forceStop == false && params.HRL_AZURE_REPO == true }
            } 
            steps { 
                script {
                    
                    releaseHelmChartScript(HRL_AZURE_DEVOPS)
                }
            } 
        }  
    }

    post {
        always {
            script {

                if(forceStop)
                    currentBuild.result = 'SUCCESS'
                else {
                    String description = ''

                    if(DEVOPS_TAG != '')
                        description = description + "Helm chart: " + DEVOPS_TAG

                    if(DEVOPS_INFRA_TAG != '')
                        description = description + " - Infra script: " + DEVOPS_INFRA_TAG

                    description = description + " - On:"

                    if(HVN_AZURE_REPO == 'true')
                        description = description + " HVN"

                    if(HRL_AZURE_REPO == 'true')
                        description = description + " HRL"

                    currentBuild.description = description
                }
            }
        }
    }
} 

def releaseHelmChartScript(String remoteRepoURL) {

    sh '''
        #!/bin/bash

        set +ex

        echo "########## [INFO] Start update $DEVOPS_DIR repo"

        RELEASE_DIR="release"
        RELEASE_BRANCH="$BUSINESS_RELEASE_NUMBER"

        echo "########## [INFO] Prepare clean target repository"
        rm -rf ./${RELEASE_DIR} | true
        git clone ''' + remoteRepoURL + ''' --depth=1 --branch=release ${RELEASE_DIR}
        cd ./${RELEASE_DIR}
        rm -rf *
        git checkout -b ${RELEASE_BRANCH}
        cd ..

        echo "########## [INFO] Copy data from $DEVOPS_INFRA_DIR and $DEVOPS_DIR"
        mkdir ./${RELEASE_DIR}/pipelines-infra
        if [ -d $DEVOPS_INFRA_DIR ];
        then
            cp -R ./hfmt-devops-infra/* ./${RELEASE_DIR}/pipelines-infra
        fi

        if [ -d $DEVOPS_DIR ];
        then
            cp -R ./hfmt-devops/* ./${RELEASE_DIR} | true
        fi

        echo "########## [INFO] Process to commit new copied data"
        cd ./${RELEASE_DIR}
        git config --global user.email "hfmt-builder-new@example.com"
        git config --global user.name "hfmt-builder-new"
        git add . >> /dev/null 2>&1 
        git commit -m "Release for $DEVOPS_TAG" >> /dev/null 2>&1 
        git push origin --delete ${RELEASE_BRANCH} >> /dev/null 2>&1 
        git push origin ${RELEASE_BRANCH}
    '''
}